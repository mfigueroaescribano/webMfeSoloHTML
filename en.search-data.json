{"/about/":{"data":{"":"","#":"Hola! üëã Soy Miguel, estudiante del grado superior de Administraci√≥n de Sistemas Inform√°ticos en Red (ASIR) üíª en el üè¢ IES Gonzalo Nazareno (Dos Hermanas), actualmente trabajando en la empresa EShipping Containers SL üö¢\nLinkedIn üíº\nTwitter üê¶\nWebsite üåç\nEmail üì¨\nGitHub Mi top lenguajes en Gitbub üëá "},"title":"Sobre m√≠"},"/docs/":{"data":{"":"This is a demo of the theme‚Äôs documentation layout.","hello-world#Hello, World!":"main.gopackage main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } "},"title":"Documentation"},"/docs/first-page/":{"data":{"":"A simple demo page."},"title":"Demo Page"},"/docs/iweb/":{"data":{"":"P√°gina con la documentaci√≥n de la asignatura IWEB"},"title":"IWEB"},"/docs/iweb/unidad-2-php/":{"data":{"":"Unidad 2: Implantaci√≥n de aplicaciones web PHP"},"title":"Unidad 2 - PHP"},"/docs/iweb/unidad-2-php/taller1/":{"data":{"":"","acceso-a-la-aplicaci√≥n#Acceso a la aplicaci√≥n":"","configuraci√≥n-del-virtualhost#Configuraci√≥n del VirtualHost":"","fichero-configphp#Fichero \u003ccode\u003eConfig.php\u003c/code\u003e":"Creamos la base de datos, y un usuario para este taller, con nombre taller1php ambos. Rellenamos la base de datos con el fichero biblioteca.sql clonado desde Git, usando el siguiente comando:\nmysql -u taller1php -p taller1.php \u003c biblioteca.sql\nConfiguraci√≥n del VirtualHost \u003cVirtualHost *:80\u003e ServerName www.biblio.debian12-virtual-mfe.org ServerAdmin webmaster@localhost DocumentRoot /var/www/biblio ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined \u003c/VirtualHost\u003e Fichero Config.php \u003c?php const base_url = \"http://www.biblio.debian12-virtual-mfe.org/\"; const host = \"localhost\"; const user = \"taller1php\"; const pass = \"iesgn\"; const db = \"taller1php\"; const charset = \"charset=utf8\"; ?\u003e ","fichero-modificado-para-l√≠mite-de-memoria#Fichero modificado para l√≠mite de memoria":"/etc/php/8.2/cli/php.ini"},"title":"Taller 1 - Instalaci√≥n de la aplicaci√≥n Biblioteca"},"/docs/sad/":{"data":{"":"P√°gina con la documentaci√≥n de la asignatura SAD - Seguridad y Alta Disponibilidad"},"title":"SAD"},"/docs/sad/pi1/":{"data":{"":"","john-the-ripper#\u003cem\u003eJohn the Ripper\u003c/em\u003e":"John the Ripper R√∫brica Instalaci√≥n Opciones de ataques de diccionario Opciones de ataques de fuerza bruta Generaci√≥n de diccionarios siguiendo reglas Comprobaci√≥n en local y en remoto Crackeo cuenta Linux Crackeo cuenta Windows Introducci√≥n En este apartado de comprobaci√≥n de fortaleza de contrase√±as usaremos John the Ripper. Esta es una herramiento de crackeo de contrase√±as escrita en C y muy utilizada por los analistas de seguridad para comprobar la robustez de una clave frente a ataques de fuerza bruta o por diccionario.\nEsta herramienta es capaz de detectar de forma autom√°tica el tipo de hash que estamos crackeando. Puede romper hashes como MD5, SHA-1 y otros muchos ampliamente utilizados en el mundo inform√°tico\nInstalaci√≥n de la herramienta Con la ejecuci√≥n del comando apt install john instalamos la herramienta. Una vez instalada, podemos realizar una prueba de rendimiento del hardware sobre el que correremos esta herramienta con el comando john --test. De esta manera, podremos saber la velocidad con la que la herramienta probar√° claves con diferentes tipos de cifrado utilizando el 100% de la CPU.\nSobre un contenedor en Proxmox con Debian12 nos arroja los siguientes resultados:\nOpciones de ataque por diccionario Uso en Linux Por problemas de dependencias con la instalaci√≥n de ‚ÄúJohn the Ripper‚Äù en el contenedor de debian12, instalamos una MV con Kali Linux donde haremos estas pruebas y donde se incluye ya la herramienta completamente funcional.\nPara probar los ataques por diccionario lo haremos con el fichero /etc/shadow, que es el que contiene la contrase√±as cifradas en los sistemas Linux.\nA continuaci√≥n deberemos tener o crear un diccionario de claves. Estos diccionarios se pueden obtener de Internet, pero para esta prueba crearemos uno sencillo con algunas claves t√≠picas y entra la que inlcuiremos iesgn, que es la clave del usuario miguel de Kali.\nPodemos encontrar wordlists en el propio repositorio de John the Ripper, clasificados por lenguajes, en el siguiente enlace: https://download.openwall.net/pub/wordlists/\nEn el fichero /usr/share/john/password.lst se almacenan todas las palabras que usar√° por defecto la herramienta para intentar descifrar la contrase√±a.\nEste es el contenido del fichero diccpassword.txt:\ntest contrasena 1234 password iesgn A continuaci√≥n, ejecutaremos John the Ripper para cracker la contrase√±a del fichero /etc/shadow tomando como diccionario el fichero diccpassword.txt. Lo hacemos con el comando john --wordlist=diccpassword.txt --format=crypt /etc/shadow. Con el par√°metro --format indicamos el formato del hash. Indicamos crypt si lo desconocemos.\nComo vemos en la captura anterior, la clave del usuario miguel era iesgn, y ha tardado pr√°cticamente ni 1 segundo, ya que el diccionario de claves solo ten√≠a 5 l√≠neas y entre ellas estaba la correcta.\nLas contrase√±as que vayamos descifrando se almacenar√°n en el directorio oculto ./john, en el fichero john.pot.\nDe esta forma hemos crackeado una cuenta en Linux. Tan s√≥lo nos ha bastado con tener acceso al fichero /etc/shadow por un momento.\nUso en Windows Ahora pasaremos al sistema Windows, para crackear una cuenta de usuario. Crearemos un par de cuentas, con los siguientes nombres de usuario y contrase√±as:\nUsuario Contrase√±a alex password fran admin123 Creamos la cuenta con el comando net user [nombre] /add, y le ponemos contrase√±a con net user [nombre] *.\nUna vez creados, descargaremos la herramienta John the Ripper para Windows desde la p√°gina oficial: https://www.openwall.com/john/, la versi√≥n jumbo release.\nAdem√°s, deberemos descargar tambi√©n la herramienta pwdump8, desde el siguiente enlace https://www.openwall.com/passwords/windows-pwdump, que nos permitir√° generar un archivo de texto con el estilo usuario:contrase√±acifrada.\nAntes de descargar este archivo deberemos desactivar Windows Defender, ya que nos lo notificar√° como peligroso para el sistema.\nEjecutamos la herramienta pwdump8 y redirijimos su salida al fichero usuarioshash.txt. Observamos el archivo que se ha generado:\nAhora pasaremos ese fichero generado por John the Ripper. El comando es similar a Linux. Nos da esta respuesta:\nHa descifrado correctamente las contrase√±as de alex y fran, que realmente son los √∫nicos usuarios que tienen contrase√±a ya que no le hemos configurado contrase√±a al usuario miguel. Este proceso ha usado las wordlist por defecto que hemos descargado con la herramienta.\nOpciones de ataque por fuerza bruta Un ataque de contrase√±as por fuerza bruta es un m√©todo utilizado para intentar descubrir una contrase√±a al probar todas las posibles combinaciones de caracteres hasta encontrar la correcta. En esencia, este tipo de ataque implica probar repetidamente todas las combinaciones posibles de contrase√±as hasta que se encuentre la que permite el acceso a una cuenta o sistema. Los atacantes utilizan software automatizado para generar y probar estas combinaciones a gran velocidad.\nLos ataques de fuerza bruta son un enfoque ineficiente y generalmente lento, ya que la cantidad de combinaciones posibles puede ser extremadamente grande, especialmente si la contrase√±a es larga y compleja. Sin embargo, pueden ser efectivos si la contrase√±a es d√©bil, es decir, corta o predecible.\nPara probar este tipo de ataques, crearemos dos nuevos usuarios en nuestra m√°quina con Kali. En ella crearemos los usuarios alex y fran, con las mismas contrase√±as que se especificaron anteriormente.\nCon el comando unshadow /etc/passwd /etc/shadow \u003e combinado.txt combinamos los contenidos de ambos archivos, y este ser√° el archivo que luego pasaremos por John.\nPasamos el archivo por John para que comience el ataque por fuerza bruta:\nEn primer lugar vemos como la contrase√±a del usuario alex la ha descifrado utilizando el m√©todo de ataque por diccionario. Pero ahora est√° intentando descifrar el resto de contrase√±as por fuerza bruta. Vemos como la m√°quina est√° empleando toda la potencia disponible de procesamiento en sucesivos intentos de cracker las claves:\nObviamente est√°bamos forzando con la segunda contrase√±a a probar todas las combinaciones posibles, sin ninguna ayuda por lo que se demorar√° bastante en conseguir un resultado, algo que no ser√≠a viable.\nComo hemos visto y comprobado, para prevenir de los ataques de contrase√±as por fuerza bruta debemos configurar contrase√±as largas, con letras, n√∫meros y s√≠mbolos cuando sea posible, as√≠ como habilitar la autentificaci√≥n de doble factor cuando sea posible.\nGeneraci√≥n de diccionarios para fuerza bruta https://thehackerway.com/2021/01/20/generacion-de-diccionarios-para-fuerza-bruta-con-pydictor/"},"title":"Herramientas de comprobaci√≥n de contrase√±as"}}